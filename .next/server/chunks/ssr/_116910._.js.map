{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/willwright/Documents/HMDA%20Research/NextJS%20Viz%20Repo/components/HighchartsDrilldownMap.jsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport HighchartsMap from \"highcharts/modules/map\";\nimport HighchartsDrilldown from \"highcharts/modules/drilldown\";\nimport mapDataWorld from \"@highcharts/map-collection/custom/world.geo.json\";\nimport TiledWebMap from \"highcharts/modules/tiledwebmap\";\n\nconst HighchartsDrilldownMap = () => {\n  const [options, setOptions] = useState(null);\n\n  useEffect(() => {\n    const initMap = async () => {\n      try {\n        // Fetch the GeoJSON data\n        const countiesGeoJSON = await fetch(\n          \"/geojson/simplified_Counties.geojson\"\n        ).then((res) => res.json());\n        const censusTractsGeoJSON = await fetch(\n          \"/geojson/simplified_CTs.geojson\"\n        ).then((res) => res.json());\n\n        // Preprocess drilldown data\n        const drilldownData = {};\n        censusTractsGeoJSON.features.forEach((feature) => {\n          const countyKey = feature.properties.COUNTYFP;\n          if (!drilldownData[countyKey]) {\n            drilldownData[countyKey] = [];\n          }\n          drilldownData[countyKey].push({\n            key: feature.properties.COUNTYFP,\n            name: feature.properties.NAME, // Adjust if needed\n            value: Math.random() * 100, // Replace with actual data\n          });\n        });\n\n        // Configure drilldown series\n        const drilldownSeries = Object.keys(drilldownData).map((countyKey) => ({\n          id: countyKey,\n          name: `Census Tracts in County ${countyKey}`,\n          mapData: {\n            type: \"FeatureCollection\",\n            features: censusTractsGeoJSON.features.filter(\n              (feature) => feature.properties.COUNTYFP === countyKey\n            ),\n          },\n          data: drilldownData[countyKey].map((item) => ({\n            key: item.key,\n            value: item.value,\n          })),\n        }));\n\n        // Set chart options\n        setOptions({\n          chart: {\n            map: countiesGeoJSON,\n          },\n          title: {\n            text: \"Drilldown Map with GeoJSON\",\n          },\n          mapNavigation: {\n            enabled: true,\n          },\n          colorAxis: {\n            min: 0,\n          },\n          series: [\n            {\n              name: \"Counties\",\n              mapData: countiesGeoJSON,\n              data: countiesGeoJSON.features.map((feature) => ({\n                key: feature.properties.COUNTYFP,\n                value: Math.random() * 100, // Replace with actual data\n                drilldown: feature.properties.COUNTYFP, // Matches drilldown series\n              })),\n            },\n          ],\n          drilldown: {\n            series: drilldownSeries,\n          },\n        });\n      } catch (error) {\n        console.error(\"Error loading GeoJSON data:\", error);\n      }\n    };\n\n    initMap();\n  }, []);\n\n  return (\n    <div>\n      {options ? (\n        <HighchartsReact\n          highcharts={Highcharts}\n          constructorType={\"mapChart\"}\n          options={options}\n        />\n      ) : (\n        <div>Loading map...</div>\n      )}\n    </div>\n  );\n};\n\nexport default HighchartsDrilldownMap;\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;;;;;;;;AAUA,MAAM,yBAAyB;IAC7B,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,UAAU;YACd,IAAI;gBACF,yBAAyB;gBACzB,MAAM,kBAAkB,MAAM,MAC5B,wCACA,IAAI,CAAC,CAAC,MAAQ,IAAI,IAAI;gBACxB,MAAM,sBAAsB,MAAM,MAChC,mCACA,IAAI,CAAC,CAAC,MAAQ,IAAI,IAAI;gBAExB,4BAA4B;gBAC5B,MAAM,gBAAgB,CAAC;gBACvB,oBAAoB,QAAQ,CAAC,OAAO,CAAC,CAAC;oBACpC,MAAM,YAAY,QAAQ,UAAU,CAAC,QAAQ;oBAC7C,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE;wBAC7B,aAAa,CAAC,UAAU,GAAG,EAAE;oBAC/B;oBACA,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC;wBAC5B,KAAK,QAAQ,UAAU,CAAC,QAAQ;wBAChC,MAAM,QAAQ,UAAU,CAAC,IAAI;wBAC7B,OAAO,KAAK,MAAM,KAAK;oBACzB;gBACF;gBAEA,6BAA6B;gBAC7B,MAAM,kBAAkB,OAAO,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,YAAc,CAAC;wBACrE,IAAI;wBACJ,MAAM,CAAC,wBAAwB,EAAE,WAAW;wBAC5C,SAAS;4BACP,MAAM;4BACN,UAAU,oBAAoB,QAAQ,CAAC,MAAM,CAC3C,CAAC,UAAY,QAAQ,UAAU,CAAC,QAAQ,KAAK;wBAEjD;wBACA,MAAM,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,OAAS,CAAC;gCAC5C,KAAK,KAAK,GAAG;gCACb,OAAO,KAAK,KAAK;4BACnB,CAAC;oBACH,CAAC;gBAED,oBAAoB;gBACpB,WAAW;oBACT,OAAO;wBACL,KAAK;oBACP;oBACA,OAAO;wBACL,MAAM;oBACR;oBACA,eAAe;wBACb,SAAS;oBACX;oBACA,WAAW;wBACT,KAAK;oBACP;oBACA,QAAQ;wBACN;4BACE,MAAM;4BACN,SAAS;4BACT,MAAM,gBAAgB,QAAQ,CAAC,GAAG,CAAC,CAAC,UAAY,CAAC;oCAC/C,KAAK,QAAQ,UAAU,CAAC,QAAQ;oCAChC,OAAO,KAAK,MAAM,KAAK;oCACvB,WAAW,QAAQ,UAAU,CAAC,QAAQ;gCACxC,CAAC;wBACH;qBACD;oBACD,WAAW;wBACT,QAAQ;oBACV;gBACF;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,+BAA+B;YAC/C;QACF;QAEA;IACF,GAAG,EAAE;IAEL,qBACE,8OAAC;kBACE,wBACC,8OAAC,qLAAA,CAAA,UAAe;YACd,YAAY,wIAAA,CAAA,UAAU;YACtB,iBAAiB;YACjB,SAAS;;;;;iCAGX,8OAAC;sBAAI;;;;;;;;;;;AAIb;uCAEe"}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}